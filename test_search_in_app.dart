import 'lib/services/product_service.dart';

void main() async {
  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Supabase (–ø–æ—Ç—Ä—ñ–±–Ω–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏)
  print('üöÄ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–æ—à—É–∫—É –≤ –¥–æ–¥–∞—Ç–∫—É');
  
  final productService = ProductService();
  
  // –¢–µ—Å—Ç—É—î–º–æ —Ä—ñ–∑–Ω—ñ –ø–æ—à—É–∫–æ–≤—ñ –∑–∞–ø–∏—Ç–∏
  final testQueries = [
    '—Ç–µ–ª–µ—Ñ–æ–Ω',
    '–∞–≤—Ç–æ',
    '–∫–≤–∞—Ä—Ç–∏—Ä–∞',
    'iPhone',
    'Toyota',
    '–ö–∏—ó–≤',
    '–õ—å–≤—ñ–≤',
  ];
  
  for (final query in testQueries) {
    print('\nüîç –¢–µ—Å—Ç—É—î–º–æ –ø–æ—à—É–∫: "$query"');
    
    try {
      final results = await productService.getProducts(
        searchQuery: query,
        limit: 5,
      );
      
      print('üìä –ó–Ω–∞–π–¥–µ–Ω–æ: ${results.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤');
      
      if (results.isNotEmpty) {
        print('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç–∏:');
        for (int i = 0; i < results.length && i < 3; i++) {
          final product = results[i];
          print('  ${i + 1}. ${product.title}');
          print('     –¶—ñ–Ω–∞: ${product.price} ${product.currency}');
          print('     –õ–æ–∫–∞—Ü—ñ—è: ${product.location}');
        }
      } else {
        print('‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
      }
      
    } catch (e) {
      print('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É: $e');
    }
  }
  
  // –¢–µ—Å—Ç—É—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–∏–π –ø–æ—à—É–∫
  print('\nüîç –¢–µ—Å—Ç—É—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–∏–π –ø–æ—à—É–∫');
  
  try {
    final filteredResults = await productService.getProducts(
      searchQuery: '–∞–≤—Ç–æ',
      categoryId: 'transport-category',
      minPrice: 10000,
      maxPrice: 50000,
      limit: 5,
    );
    
    print('üìä –§—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–∏–π –ø–æ—à—É–∫: ${filteredResults.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤');
    
  } catch (e) {
    print('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–æ–≥–æ –ø–æ—à—É–∫—É: $e');
  }
  
  print('\n‚úÖ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
} 
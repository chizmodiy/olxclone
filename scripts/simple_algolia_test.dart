import 'package:http/http.dart' as http;
import 'dart:convert';

class SimpleAlgoliaTester {
  final String appId;
  final String searchKey;
  final String indexName;

  SimpleAlgoliaTester({
    required this.appId,
    required this.searchKey,
    required this.indexName,
  });

  Future<void> testConnection() async {
    try {
      print('üîó –¢–µ—Å—Ç—É—î–º–æ –∑\'—î–¥–Ω–∞–Ω–Ω—è –∑ Algolia...');
      
      final url = 'https://$appId-dsn.algolia.net/1/indexes/$indexName/settings';
      
      final response = await http.get(
        Uri.parse(url),
        headers: {
          'X-Algolia-API-Key': searchKey,
          'X-Algolia-Application-Id': appId,
        },
      );

      print('üìä –°—Ç–∞—Ç—É—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: ${response.statusCode}');
      
      if (response.statusCode == 200) {
        print('‚úÖ –ó\'—î–¥–Ω–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ!');
        final data = jsonDecode(response.body);
        print('üìã –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—É:');
        print('  - –ù–∞–∑–≤–∞: ${data['indexName']}');
        print('  - –ü–æ—à—É–∫–æ–≤—ñ –∞—Ç—Ä–∏–±—É—Ç–∏: ${data['searchableAttributes']?.join(', ')}');
        print('  - –§–∞—Å–µ—Ç–∏: ${data['attributesForFaceting']?.join(', ')}');
      } else {
        print('‚ùå –ü–æ–º–∏–ª–∫–∞: ${response.statusCode}');
        print('üìÑ –í—ñ–¥–ø–æ–≤—ñ–¥—å: ${response.body}');
      }
      
    } catch (e) {
      print('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑\'—î–¥–Ω–∞–Ω–Ω—è: $e');
    }
  }

  Future<void> testSearch(String query) async {
    try {
      print('\nüîç –¢–µ—Å—Ç—É—î–º–æ –ø–æ—à—É–∫: "$query"');
      
      final url = 'https://$appId-dsn.algolia.net/1/indexes/$indexName/query';
      
      final response = await http.post(
        Uri.parse(url),
        headers: {
          'X-Algolia-API-Key': searchKey,
          'X-Algolia-Application-Id': appId,
          'Content-Type': 'application/json',
        },
        body: jsonEncode({
          'query': query,
          'hitsPerPage': 5,
        }),
      );

      print('üìä –°—Ç–∞—Ç—É—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: ${response.statusCode}');
      
      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        print('‚úÖ –ü–æ—à—É–∫ —É—Å–ø—ñ—à–Ω–∏–π!');
        print('üìä –ó–Ω–∞–π–¥–µ–Ω–æ: ${data['nbHits']} —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤');
        print('‚è±Ô∏è –ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: ${data['processingTimeMS']}ms');
        
        if (data['hits'] != null && data['hits'].isNotEmpty) {
          print('\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç–∏:');
          for (int i = 0; i < data['hits'].length && i < 3; i++) {
            final hit = data['hits'][i];
            print('  ${i + 1}. ${hit['title'] ?? '–ë–µ–∑ –Ω–∞–∑–≤–∏'}');
          }
        }
      } else {
        print('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É: ${response.statusCode}');
        print('üìÑ –í—ñ–¥–ø–æ–≤—ñ–¥—å: ${response.body}');
      }
      
    } catch (e) {
      print('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É: $e');
    }
  }

  Future<void> testIndexInfo() async {
    try {
      print('\nüìä –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —ñ–Ω–¥–µ–∫—Å...');
      
      final url = 'https://$appId-dsn.algolia.net/1/indexes/$indexName';
      
      final response = await http.get(
        Uri.parse(url),
        headers: {
          'X-Algolia-API-Key': searchKey,
          'X-Algolia-Application-Id': appId,
        },
      );

      print('üìä –°—Ç–∞—Ç—É—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: ${response.statusCode}');
      
      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        print('‚úÖ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –æ—Ç—Ä–∏–º–∞–Ω–∞!');
        print('üìã –î–µ—Ç–∞–ª—ñ —ñ–Ω–¥–µ–∫—Å—É:');
        print('  - –ù–∞–∑–≤–∞: ${data['name']}');
        print('  - –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤: ${data['entries']}');
        print('  - –†–æ–∑–º—ñ—Ä: ${data['dataSize']} –±–∞–π—Ç');
        print('  - –û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: ${data['lastUpdate']}');
      } else {
        print('‚ùå –ü–æ–º–∏–ª–∫–∞: ${response.statusCode}');
        print('üìÑ –í—ñ–¥–ø–æ–≤—ñ–¥—å: ${response.body}');
      }
      
    } catch (e) {
      print('‚ùå –ü–æ–º–∏–ª–∫–∞: $e');
    }
  }

  Future<void> runAllTests() async {
    print('üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–∏—Ö —Ç–µ—Å—Ç—ñ–≤ Algolia\n');
    
    // –¢–µ—Å—Ç –∑'—î–¥–Ω–∞–Ω–Ω—è
    await testConnection();
    
    // –¢–µ—Å—Ç —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —ñ–Ω–¥–µ–∫—Å
    await testIndexInfo();
    
    // –¢–µ—Å—Ç –ø–æ—à—É–∫—É
    await testSearch('—Ç–µ–ª–µ—Ñ–æ–Ω');
    await testSearch('–∞–≤—Ç–æ');
    await testSearch('–∫–≤–∞—Ä—Ç–∏—Ä–∞');
    
    print('\n‚úÖ –í—Å—ñ —Ç–µ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
  }
}

void main() async {
  // –í–∞—à—ñ –∫–ª—é—á—ñ Algolia
  const appId = 'XYA8SCV3KC';
  const searchKey = '6782ed5c8812fb117b825a5890912b31';
  const indexName = 'products';

  final tester = SimpleAlgoliaTester(
    appId: appId,
    searchKey: searchKey,
    indexName: indexName,
  );

  await tester.runAllTests();
} 
import 'package:algoliasearch/algoliasearch.dart';

class AlgoliaSearchTester {
  late final SearchClient searchClient;
  late final String indexName;

  AlgoliaSearchTester({
    required String appId,
    required String searchKey,
    required String indexName,
  }) {
    this.indexName = indexName;
    searchClient = SearchClient(
      appId: appId,
      apiKey: searchKey, // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Search-Only Key –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    );
  }

  Future<void> testBasicSearch(String query) async {
    try {
      print('üîç –¢–µ—Å—Ç—É—î–º–æ –±–∞–∑–æ–≤–∏–π –ø–æ—à—É–∫: "$query"');
      
      final response = await searchClient.searchIndex(
        request: SearchForHits(
          indexName: indexName,
          query: query,
          hitsPerPage: 10,
        ),
      );

      print('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏:');
      print('  - –ó–Ω–∞–π–¥–µ–Ω–æ: ${response.nbHits} —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤');
      print('  - –ü–æ–∫–∞–∑–∞–Ω–æ: ${response.hits.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤');
      print('  - –ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: ${response.processingTimeMS}ms');
      
      if (response.hits.isNotEmpty) {
        print('\nüìã –ü–µ—Ä—à—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏:');
        for (int i = 0; i < response.hits.length && i < 5; i++) {
          final hit = response.hits[i];
          print('  ${i + 1}. ${hit['title']} (ID: ${hit['id']})');
          if (hit['price'] != null) {
            print('     –¶—ñ–Ω–∞: ${hit['price']} ${hit['currency'] ?? ''}');
          }
          if (hit['location'] != null) {
            print('     –õ–æ–∫–∞—Ü—ñ—è: ${hit['location']}');
          }
        }
      }
      
    } catch (e) {
      print('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É: $e');
    }
  }

  Future<void> testFilteredSearch({
    String? query,
    String? categoryId,
    String? region,
    bool? isFree,
    double? minPrice,
    double? maxPrice,
  }) async {
    try {
      print('\nüîç –¢–µ—Å—Ç—É—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–∏–π –ø–æ—à—É–∫');
      print('  Query: $query');
      print('  Category: $categoryId');
      print('  Region: $region');
      print('  Free: $isFree');
      print('  Price: $minPrice - $maxPrice');

      // –ë—É–¥—É—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–∏
      final filters = <String>[];
      
      if (categoryId != null) {
        filters.add('category_id:$categoryId');
      }
      
      if (region != null) {
        filters.add('region:$region');
      }
      
      if (isFree != null) {
        filters.add('is_free:$isFree');
      }
      
      if (minPrice != null || maxPrice != null) {
        if (minPrice != null && maxPrice != null) {
          filters.add('price:$minPrice TO $maxPrice');
        } else if (minPrice != null) {
          filters.add('price >= $minPrice');
        } else if (maxPrice != null) {
          filters.add('price <= $maxPrice');
        }
      }

      final filterString = filters.isNotEmpty ? filters.join(' AND ') : null;

      final response = await searchClient.searchIndex(
        request: SearchForHits(
          indexName: indexName,
          query: query ?? '',
          filters: filterString,
          hitsPerPage: 10,
        ),
      );

      print('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–æ–≥–æ –ø–æ—à—É–∫—É:');
      print('  - –ó–Ω–∞–π–¥–µ–Ω–æ: ${response.nbHits} —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤');
      print('  - –§—ñ–ª—å—Ç—Ä–∏: $filterString');
      
      if (response.hits.isNotEmpty) {
        print('\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç–∏:');
        for (int i = 0; i < response.hits.length && i < 3; i++) {
          final hit = response.hits[i];
          print('  ${i + 1}. ${hit['title']}');
        }
      }
      
    } catch (e) {
      print('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–æ–≥–æ –ø–æ—à—É–∫—É: $e');
    }
  }

  Future<void> testGeoSearch({
    required double latitude,
    required double longitude,
    int radiusInKm = 50,
  }) async {
    try {
      print('\nüåç –¢–µ—Å—Ç—É—î–º–æ –≥–µ–æ–ø–æ—à—É–∫');
      print('  –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏: $latitude, $longitude');
      print('  –†–∞–¥—ñ—É—Å: ${radiusInKm}km');

      final response = await searchClient.searchIndex(
        request: SearchForHits(
          indexName: indexName,
          query: '',
          aroundLatLng: '$latitude,$longitude',
          aroundRadius: radiusInKm * 1000, // –≤ –º–µ—Ç—Ä–∞—Ö
          hitsPerPage: 10,
        ),
      );

      print('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≥–µ–æ–ø–æ—à—É–∫—É:');
      print('  - –ó–Ω–∞–π–¥–µ–Ω–æ: ${response.nbHits} —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤');
      
      if (response.hits.isNotEmpty) {
        print('\nüìã –ë–ª–∏–∂—á—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏:');
        for (int i = 0; i < response.hits.length && i < 5; i++) {
          final hit = response.hits[i];
          final distance = hit['_rankingInfo']?['geoDistance'] ?? 'N/A';
          print('  ${i + 1}. ${hit['title']} (–≤—ñ–¥—Å—Ç–∞–Ω—å: ${distance}–º)');
        }
      }
      
    } catch (e) {
      print('‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–æ–ø–æ—à—É–∫—É: $e');
    }
  }

  Future<void> testFacets() async {
    try {
      print('\nüè∑Ô∏è –¢–µ—Å—Ç—É—î–º–æ —Ñ–∞—Å–µ—Ç–∏');

      final response = await searchClient.searchIndex(
        request: SearchForHits(
          indexName: indexName,
          query: '',
          facets: ['category_name', 'region', 'is_free'],
          hitsPerPage: 0, // –¢—ñ–ª—å–∫–∏ —Ñ–∞—Å–µ—Ç–∏, –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        ),
      );

      print('üìä –î–æ—Å—Ç—É–ø–Ω—ñ —Ñ–∞—Å–µ—Ç–∏:');
      
      if (response.facets != null) {
        for (final facet in response.facets!.entries) {
          print('\n  ${facet.key}:');
          for (final value in facet.value.entries) {
            print('    ${value.key}: ${value.value}');
          }
        }
      }
      
    } catch (e) {
      print('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ–∞—Å–µ—Ç—ñ–≤: $e');
    }
  }

  Future<void> runAllTests() async {
    print('üöÄ –ó–∞–ø—É—Å–∫ –≤—Å—ñ—Ö —Ç–µ—Å—Ç—ñ–≤ Algolia –ø–æ—à—É–∫—É\n');
    
    // –ë–∞–∑–æ–≤–∏–π –ø–æ—à—É–∫
    await testBasicSearch('—Ç–µ–ª–µ—Ñ–æ–Ω');
    await testBasicSearch('–∞–≤—Ç–æ');
    await testBasicSearch('–∫–≤–∞—Ä—Ç–∏—Ä–∞');
    
    // –§—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–∏–π –ø–æ—à—É–∫
    await testFilteredSearch(
      query: '—Ç–µ–ª–µ—Ñ–æ–Ω',
      minPrice: 100,
      maxPrice: 1000,
    );
    
    await testFilteredSearch(
      query: '–∞–≤—Ç–æ',
      isFree: false,
    );
    
    // –ì–µ–æ–ø–æ—à—É–∫ (–ö–∏—ó–≤)
    await testGeoSearch(
      latitude: 50.4501,
      longitude: 30.5234,
      radiusInKm: 20,
    );
    
    // –§–∞—Å–µ—Ç–∏
    await testFacets();
    
    print('\n‚úÖ –í—Å—ñ —Ç–µ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
  }
}

void main() async {
  // –ù–æ–≤—ñ –∫–ª—é—á—ñ Algolia
  const appId = 'XYA8SCV3KC';
  const searchKey = '6782ed5c8812fb117b825a5890912b31';
  const indexName = 'products';

  final tester = AlgoliaSearchTester(
    appId: appId,
    searchKey: searchKey,
    indexName: indexName,
  );

  await tester.runAllTests();
} 